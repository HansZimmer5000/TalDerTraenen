Kombinationen

    Kombi1
    Unser: Koordinator
    Ihrer: Starter, ggT-Prozess
    Problem: -

    Kombi2
    Unser: Starter, ggT-Prozess
    Ihrer: Koordinator
    Problem: -

    Kombi3
    Unser: Koordinator, Starter, ggT-Prozess
    Ihrer: Starter, ggT-Prozess
    Problem: 

TODO:
    ggT selbstständig, ohne GoValues, machen, wofür bräuchte dann der Starter die Ahnung von den SteeringVals?
    init_receive_loop in ggtprocess einfach sequenzell machen (Msg pattern matching von erlang nutzen)
    Ganz vergessen: Antworten auf Vote schon nach der hälfte der Wartezeit!
    Unsere ggT-Prozesse warten nicht lange genug auf vote_yesses?
    Reset und Kill nochmal checken.

Offene Fragen:

Geschlossene Fragen:
    - Was wenn schon in Calc-Phase aber es kommt nochmal calc?
        Calc von vorn starten.
    - Was bedeuten die Variablen?
        ArbeitsZeit -> Delay zwischen Jetzt und der Zeit wenn der ggT-Prozess anfangen soll zu arbeiten
        TermZeit    -> Die TermZeit gilt für den ggT-Prozess, Mit jeder empfangenen Nachricht (außerhalb der Abstimmung) wird die Zeit resetet, läuft sie ab, initiert der betroffene ggT-Prozess eine Abstimmung.
        GGTProAnz   -> Anzahl an ggT-Prozessen
        GGTProName  -> Name des ggT-Prozesses
        CMi     -> Client Mi
        CZeit   -> Client Zeit des abschickens
        LCMi    -> Letztes Minimales Mi (ggT eines Prozesses) im ganzen System
        WggT    -> Wunsch ggT
        LeftN   -> Node links des aktuellen (Im Kreis, Uhrzeigersinn)
        RightN  -> Node rechts des aktuellen (Im Kreis, Gegen den Uhrzeigersinn)
        MiNeu   -> Neues Mi für gewissen ggT-Prozess
        Quota   -> Anzahl an ggT-Prozessen die (evtl. vorerst) am Ende der Berechnung angekommen sind und sich dem Abstimmungsinitiator zurückgemeldet haben
    - Warum hat Koordinator manchmal eine Response auf {briefterm, ...} vom Starter oder ggT-Prozess?
        Weil der Koordinator bei Korrekturflag = true eine Korrektur schickt und wenn False eben nicht.
    - Bis wann wird auf alle Starter und deren ggT-Prozesse gewartet?
        Bis 'step' beim Koordinator einget.
    - Reset -> Starter müssen dann auch unbinden und neu starten (neu steeringval anfragen)!
        Ja.
    - Was ist die "Abstimmung"?
        Läuft die TermZeit eines ggT-Prozesses ab, initiert er mit Hilfe des nameservice eine Abstimmung unter allen ggT-Prozessen.
        Meldet sich eine gewisse Anzahl an ggT-Prozessen zurück deren TermZeit auch erreicht wurde (=Quota erfüllt), wird die gesamte über alle Prozesse Kalkulation beendet.
    - Was machen die Koordinator aufrufe:
        step    -> Übergang von Sammeln der ggT-Prozess hellos zum errichten des Kreises
        prompt  -> ("Antreiben") ggT-Prozesse auffordern aktuellen Mi zurück zu schicken.
        nudge   -> ("Anstupsen") Anpingen, pong zurück erwarten
        toggle  -> ("Umschalten") Invertieren dass Korrekturflag
    - Wie sieht der GGTProName aus?
        "GGT-" + StarterNummer + Praktikumsgruppennummer + Teamnummer + ggT-Prozess Nummer (von 1 bis GGTProAnz).
    - Was ist das 2. Argument bei starter:go?
        Nummer des Starters
    - Wofür ist koordinator genau zuständig?
        Verwaltet die ggT-Prozesse
    - Wofür ist starter genau zuständig?
        Er startet alle ggT-Prozesse (noch ohne Mis)
    - Sind Initial nur Nummern eingegeben die auch alle einen ggT haben?
        Macht dann koordinator mit vsutil:bestimme_mis/2 + verschicken der Mis an die ggT-Prozesse
    - Wofür ist nameservice genau zuständig?
        Managen der prozess + nodenamen auf prozess Ids, wie ein DNS.
    - Wie erkennt man die Terminierung?
        Alle haben die selbe Zahl, den Wunsch ggT (WggT), oder wenn die Zahlen nicht zusammenpassen (z.b. 27, 4) und nichts mehr geht.
    - Welche Startnummern haben die Prozesse?
        Die von der Folie oder eben selbst ausdenken.
    - Was passiert wenn Y == X bzw. Y > X?
        Keine Zahl verändert sich, keine Nachricht wird aufgrund dessen geschickt.
        Der Prozess der durch einkommendes Y nicht verändert wird logt "Teminierung mit ggT XY".
    - Warum hört das Programm auf zu Arbeiten (Beispiel 1, Folien)? 
        Weil keine Zahl im letzten Schritt verändert wurde -> keine Nachricht geschickt wurde.
    - Wo steht das Ergebnis?
        Theoretisch in allen Prozessen mit Mi, der ja dann dem ggT entspricht.
    - Warum wird eine Nummer per Hand gesendet (Beispiel 2, Folien)?
        Weil das System sonst nicht weiterrechnet.
    - Warum steht bei Koordinator in den Folien ggT-Prozess und manchmal nicht?
        Weil manchmal auch der ggT-Prozess diese Calls verstehen muss.
    - Warum steht bei Starter in den Folien ggT-Prozess?
        Weil der ggT-Prozess die Calls auch verstehen muss.

Ablauf:
    INITIAL
    nameservice:start()     nameservice wird gestartet.
    koordinator:start()     koordinator wird gestartet und meldet sich beim nameservice an.
                            ?NAMESERVICE ! {self(), {rebind, KoName, KoNode}}
    starter:go(Anzahl, StarterNummer) starter wird gestartet
                            fordert vom koordinator {self(), getsteeringval} an.
                            GoValues weiter geben an zu startende definierte Anzahl ggT-Prozesse
                            GoValues = {ArbeitsZeit, TermZeit, GGTProName, Quota}
    ggT-Prozess             meldet sich beim nameservice an,
                            ?NAMESERVICE ! {self(), {rebind, Clientname, self()}}
                            sagt dem koordinator hallo
                            {hello, GGTProName}
    koordinator             wartet auf alle ggT-Prozesse, bis "step" kommmt, dann wird der Kreis gebaut.
                            ?NAMESERVICE ! {self(), {lookup, GGTProName}}
                            ggT-Prozess ! {setneighbors, LeftNode, RightNode}

    CALCULATION
    anwender        schickt an koordinator {calc, WggT}
    koordinator     bekommt {calc, WggT}, 
                    ruft vsutil:bestimme_mis/2 auf 
                    und verteilt Mis and ggT-Prozesse {setpm, MiNeu}
                    danach  wählt er zufällig 20% bzw. min. 2 nodes aus 
                    zu denen eine der verteilen pms schickt
    ggT-Prozess     Warten auf empfang von {setpm, MiNeu} -> Mi setzen.
                    Warten auf empfang von {sendy, Y} -> Formel ausführen
                    Wenn NeuMi <> Mi -> an Nachbarn schicken

    VOTING
    ggT-Prozess#1   Läuft die TermZeit eines ggT-Prozess ab, initiert er mit Hilfe des nameservice eine Abstimmung
                    ?NAMESERVICE ! {InitiatorPid, {multicast, vote, GGTProName}} (InitiatorPid = self())
    nameservice     Schickt an alle (außer den Initiator) ggT-Prozesse die Aufforderung zur Abstimmung.
                    GGTProPid ! {InitiatorPid, {vote, InitiatorGGTProName}}
    ggT-Prozess#n   Falls bei #n auch die TermZeit abgelaufen ist;
                    Antwortet der ggT-Prozess auf die Aufforderung mit:
                    InitiatorPid ! {voteYes, GGTProName}
    ggT-Prozess#1   Er wartet dann auf genügend Rückmeldungen, ist eine gewisse Anzahl erreicht (Quota), beendet der ggT-Prozess seine Berechnung
                    Er reagiert dann nur noch auf Abstimmungen mit einer Rückmeldung
                    Wird die Quota nicht erreicht, so geht er wieder in die Kalkulation zurück.
    

Eigentlich wichtige Formel:
    ggT(x,0) = x
    ggT(x,x) = x
    ggT(x,y) = ggT(y, mod(x,y))

Hier verwendet (Verteilte) Version:
    - Ein Prozess "Pi" hat eine Nummer "Mi"
    - "Mi" wird behandelt wie x.
    - Die eingesendete Nummer ist y.
    if y < Mi
        then Mi = mod(Mi - 1, y) + 1
            send Mi to all neighbours - Eine Art Rekursivität

Komponenten:
    nameservice     - Verwaltet die Prozess- und Nodenamen und bildet auf Prozessids ab.
        NamesToPids: Liste aus Namen & Pid Tupeln {NameXY, {RegisteredName, Node}}
    koordinator     - Verwaltet die ggT-Prozesse (manuelle Kommandos, ggT-Prozessnachbarn, logging)
    starter         - Startet die ggT-Prozesse, noch ohne Mi.
    ggT-Prozess     - Hat ein Mi und kennt ggT-Formel, berechnet eigentliches Ergebnis, den ggT.

API:
    nameservice
        (vom koordinator, ggT-Process)
        {AbsenderPid, {bind, Name, node()}} -> ok | in_use
        {AbsenderPid, {rebind, Name, node()}} -> ok
        {AbsenderPid, {lookup, Name}} -> {pin, {Name, Node}} | not_found
        {AbsenderPid, {unbind, Name}} -> ok
        {AbsenderPid, {multicast, vote, MeinName}} -> {AbsenderPid, {vote, MeinName}} (I guess, an alle ggT-Prozesse + koordinator?)
        {AbsenderPid, reset} -> ok

    koordinator
        (vom starter & ggT-Prozess)
        {AbsenderPid, getsteeringval} -> {steeringval, ArbeitsZeit, TermZeit, Quota, GGTProAnz}
        {hello, GGTProName} -> none
        {briefmi, {GGTProName, CMi, CZeit}} -> none
        {AbsenderPid, briefterm, {GGTProName, CMi, CZeit}} -> {sendy, LCMi}
        {pongGGT, GGTProName} -> none (Antwort auf Ping)
        {mi, Mi} -> none (Antwort auf tellmi über prompt)

        (manuell)
        reset -> none
        step -> none
        {calc, WggT} -> none
        prompt -> none
        nudge -> none
        toggle -> none
        kill -> none

    starter & ggT-Prozess
        (vom koordinator & ggT-Prozess)
        {steeringval, ArbeitsZeit, TermZeit, Quota, GGTProAnz} -> none
        {setneighbors, LeftN, RightN} -> none 
        {setpm, MiNeu} -> none
        {sendy, Y} -> {sendy, MiNeu}
        {voteYes, GGTProName} -> none
        {AbsenderPid, tellmi} -> {mi, Mi}
        {AbsenderPid, pingGGT} -> {pongGGT, GGTProName}
        kill -> none

